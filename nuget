
# Azure Pipelines YAML
trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

steps:
- task: PowerShell@2
  displayName: 'Install NuGet'
  inputs:
    targetType: 'inline'
    script: |
      # Create destination folder
      $nugetFolderPath = 'C:\nuget'
      New-Item -ItemType Directory -Force -Path $nugetFolderPath

      # Download NuGet.exe
      $nugetUrl = 'https://dist.nuget.org/win-x86-commandline/latest/nuget.exe'
      $nugetPath = Join-Path -Path $nugetFolderPath -ChildPath 'nuget.exe'
      Invoke-WebRequest -Uri $nugetUrl -OutFile $nugetPath -UseBasicParsing

      # Add NuGet.exe to PATH for the current process
      $envPath = [Environment]::GetEnvironmentVariable('PATH', 'Process')
      $newPath = "$envPath;$nugetFolderPath"
      [Environment]::SetEnvironmentVariable('PATH', $newPath, 'Process')

- script: |
    $(nugetPath) sources add -name "NuGet.org" -source "https://api.nuget.org/v3/index.json" -configfile "$(Build.SourcesDirectory)/NuGet.config"
  displayName: 'Add NuGet.org as package source'

- script: |
    $(nugetPath) restore "$(Build.SourcesDirectory)/YourSolution.sln" -NonInteractive -IgnoreSSL
  displayName: 'Restore NuGet packages'


-------------------------------------------------------------------------------------------
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

- script: |
    echo "##vso[task.setvariable variable=NUGET_CERTIFICATE_VALIDATION]false"
  displayName: 'Set NUGET_CERTIFICATE_VALIDATION environment variable'

- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'
    feedsToUse: 'config'
    nugetConfigPath: '$(Build.SourcesDirectory)/NuGet.config'
    nuGetAddExtraEnvironmentVariable: 'NUGET_CERTIFICATE_VALIDATION_MODE=0'



--------------------------------------------------

steps:
- script: |
    echo "trustAllCert=true" >> "$(Build.SourcesDirectory)/NuGet.Config"
  displayName: 'Disable certificate validation in NuGet.Config'

- script: |
    "$(Build.SourcesDirectory)\nuget.exe" restore "$(Build.SourcesDirectory)/YourSolution.sln" -NonInteractive -ConfigFile "$(Build.SourcesDirectory)/NuGet.Config"
  displayName: 'Restore NuGet packages'

-------------------------------------------------------------
- script: |
    echo "DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER=false" >> $(Agent.BuildDirectory)/.env
  displayName: 'Set DOTNET_SYSTEM_NET_HTTP_USESOCKETSHTTPHANDLER environment variable'

------------------------------------------------------------------------
- powershell: |
    Set-Content -Path "$(Build.SourcesDirectory)/NuGet.Config" -Value '<?xml version="1.0" encoding="utf-8"?><configuration><config><add key="globalPackagesFolder" value=".\packages" /></config><packageSources><add key="NuGet.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" /></packageSources></configuration>'
  displayName: 'Create NuGet.Config file'

- script: |
    dotnet restore "$(Build.SourcesDirectory)/YourSolution.sln" --configfile "$(Build.SourcesDirectory)/NuGet.Config" --no-restore
  displayName: 'Restore NuGet packages'
----------------------------------------------------------
- task: UseDotNet@2
  displayName: 'Use .NET Framework 4.0'
  inputs:
    packageType: 'sdk'
    version: '4.0.30319'
    addToPath: true
------------------------------------
- task: JFrogArtifactory@1
  displayName: 'Publish Build Artifacts'
  inputs:
    serverId: 'YourArtifactoryServiceConnection' # Replace with your JFrog Artifactory service connection name
    buildName: 'MyBuildName'
    buildNumber: '$(Build.BuildNumber)'
    collectBuildInfo: true

- powershell: |
    # Set the environment variable for the current session
    $env:NODE_TLS_REJECT_UNAUTHORIZED = '0'
  displayName: 'Set NODE_TLS_REJECT_UNAUTHORIZED'

- task: PowerShell@2
  displayName: 'Set Working Directory'
  inputs:
    targetType: 'inline'
    script: |
      # Set the working directory to \agent\_work\21\s
      cd $(Agent.BuildDirectory)\..\21\s
-----------------------------------------------------------
steps:
- task: CmdLine@2
  displayName: 'Install JFrog CLI'
  inputs:
    script: |
      Invoke-WebRequest -Uri https://getcli.jfrog.io -OutFile jfrog_cli_installer.ps1
      ./jfrog_cli_installer.ps1
- task: CmdLine@2
  displayName: 'Configure JFrog CLI'
  inputs:
    script: |
      # Configure JFrog CLI with Artifactory server details and authentication
      jfrog rt c --url "https://your-artifactory-server-url" --user "your-username" --password "your-password" --interactive=false

- task: CmdLine@2
  displayName: 'Publish Artifacts to JFrog Artifactory'
  inputs:
    script: |
      # Build your project or generate the artifacts (use appropriate build commands)

      # Publish build artifacts to Artifactory
      jfrog rt u "<path-to-local-artifacts>/*" "generic-local/<target-artifactory-path>/" --recursive=true
